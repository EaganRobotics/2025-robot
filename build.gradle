import org.gradle.internal.os.OperatingSystem

plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2025.3.2"

    // Add gversion plugin for AdvantageKit
    id "com.peterabeles.gversion" version "1.10"

    // Spotless for format checking
    id "com.diffplug.spotless" version "7.0.2"
}

// repositories {
//     mavenLocal()
//     gradlePluginPortal()
//     String frcYear = '2025'
//     File frcHome
//     if (OperatingSystem.current().isWindows()) {
//         String publicFolder = System.getenv('PUBLIC')
//         if (publicFolder == null) {
//             publicFolder = "C:\\Users\\Public"
//         }
//         def homeRoot = new File(publicFolder, "wpilib")
//         frcHome = new File(homeRoot, frcYear)
//     } else {
//         def userFolder = System.getProperty("user.home")
//         def homeRoot = new File(userFolder, "wpilib")
//         frcHome = new File(homeRoot, frcYear)
//     }
//     def frcHomeMaven = new File(frcHome, 'maven')
//     maven {
//         name 'frcHome'
//         url frcHomeMaven
//     }
// }

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                    deleteOldFiles = true // Change to true to delete files on roboRIO that no
                                           // longer exist in deploy directory of this project
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 5.
dependencies {
    annotationProcessor wpi.java.deps.wpilibAnnotations()
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Install AdvantageKit into existing project
    def akitJson = new groovy.json.JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + "/vendordeps/AdvantageKit.json").text)
    annotationProcessor "org.littletonrobotics.akit:akit-autolog:$akitJson.version"
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = providers.environmentVariable('AKIT_SIM_MODE').map(env -> env.equals("SIM")).orElse(true)
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.main.allSource
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}

// Install AdvantageKit into existing project
task(replayWatch, type: JavaExec) {
    mainClass = "org.littletonrobotics.junction.ReplayWatch"
    classpath = sourceSets.main.runtimeClasspath
}

// Setup Version Control for AdvantageKit
project.compileJava.dependsOn(createVersionFile)
gversion {
  srcDir       = "src/main/java/"
  classPackage = "frc.robot"
  className    = "BuildConstants"
  dateFormat   = "yyyy-MM-dd HH:mm:ss z"
  timeZone     = "America/Central" // Use preferred time zone
  indent       = "  "
}

// Create commit with working changes upon deploy on branches prefixed with 'event'
task(eventDeploy) {
    doLast {
        if (project.gradle.startParameter.taskNames.any({ it.toLowerCase().contains("deploy") })) {
            def branchPrefix = "event"
            def branch = 'git branch --show-current'.execute().text.trim()
            def commitMessage = "Update at '${new Date().toString()}'"

            if (branch.startsWith(branchPrefix)) {
                exec {
                    workingDir(projectDir)
                    executable 'git'
                    args 'add', '-A'
                }
                exec {
                    workingDir(projectDir)
                    executable 'git'
                    args 'commit', '-m', commitMessage
                    ignoreExitValue = true
                }

                println "Committed to branch: '$branch'"
                println "Commit message: '$commitMessage'"
            } else {
                println "Not on an event branch, skipping commit"
            }
        } else {
            println "Not running deploy task, skipping commit"
        }
    }
}
createVersionFile.dependsOn(eventDeploy)

spotless {
  java {
    eclipse().configFile('config/eclipse-java-google-style.xml')
    targetExclude('build/**', 'src/main/java/frc/robot/BuildConstants.java')
  }
  enforceCheck = false
}

// Integration Test Task
task integrationTest(type: JavaExec) {
  mainClass = "frc.lib.SimTestRunner"

  dependsOn(project.tasks.named(wpi.java.debugJni.get() ? 'extractDebugNative' : 'extractReleaseNative'))

  doFirst {
    File ldpath = project.tasks.named(wpi.java.debugJni.get() ? 'extractDebugNative' : 'extractReleaseNative').get().destinationDirectory.get().asFile
    List<edu.wpi.first.gradlerio.simulation.HalSimPair> extensions = wpi.sim.getHalSimLocations(List.of(ldpath), wpi.java.debugJni.get())
    Map<String, String> env = wpi.sim.getEnvironment()
    environment(env)

    def extensionString = extensions.stream().filter(x -> x.defaultEnabled).map(x -> x.libName)
        .reduce((a, b) -> a + File.pathSeparator + b)
    if (extensionString.isPresent()) {
      environment("HALSIM_EXTENSIONS", extensionString.get())
    }

    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
      println("If you receive errors loading the JNI dependencies, make sure you have the latest Visual Studio C++ Redistributable installed.")
      println("That can be found at https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads")
    }

    // Explicitly set java.library.path
    jvmArgs "-Djava.library.path=${ldpath.getAbsolutePath()}"

    if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
      environment("DYLD_LIBRARY_PATH", ldpath.getAbsolutePath())
    }
  }

  if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
    jvmArgs "-XstartOnFirstThread"
  }

  project.afterEvaluate {
      classpath = project.files(
          tasks.named('jar').get().outputs.files,
          configurations.runtimeClasspath,
          sourceSets.test.output.files
      )
  }
}
